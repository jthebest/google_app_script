function listFilesAndFolders() {
  const folderId = 'xxxxxxxxxxxxxx'; // ID de la carpeta
  const docName = 'Tabla de Contenidos'; // Nombre del documento
  const items = [];

  // Obtiene o crea el documento
  let doc = getOrCreateDocument(docName);
  const body = doc.getBody();
  
  // Limpia el contenido del documento
  body.clear();
  body.appendParagraph('Tabla de Contenidos').setHeading(DocumentApp.ParagraphHeading.HEADING1);
  
  // Obtiene todos los archivos y carpetas
  const folder = DriveApp.getFolderById(folderId);
  listItems(folder, items, 0); // Pasa el nivel de sangría inicial como 0
  
  // Agrega los elementos al documento
  items.forEach(item => {
    const indent = '\u2003'.repeat(item.level * 2); // Usar un carácter de espacio
    body.appendParagraph(indent + item.name).setLinkUrl(item.url);
  });
  
  doc.saveAndClose();
  Logger.log('Documento actualizado: ' + doc.getUrl());
}

function getOrCreateDocument(name) {
  const files = DriveApp.getFilesByName(name);
  
  if (files.hasNext()) {
    return DocumentApp.openById(files.next().getId());
  } else {
    return DocumentApp.create(name);
  }
}

function listItems(folder, items, level) {
  const subfolders = [];
  const files = [];
  
  // Obtener subcarpetas
  const subfolderIterator = folder.getFolders();
  while (subfolderIterator.hasNext()) {
    subfolders.push(subfolderIterator.next());
  }
  
  // Obtener archivos
  const fileIterator = folder.getFiles();
  while (fileIterator.hasNext()) {
    files.push(fileIterator.next());
  }
  
  // Ordenar subcarpetas teniendo en cuenta el orden numérico
  subfolders.sort((a, b) => {
    const nameA = a.getName();
    const nameB = b.getName();
    return compareNumericStrings(nameA, nameB);
  });
  
  // Agregar subcarpetas a la lista
  subfolders.forEach(subfolder => {
    items.push({
      name: subfolder.getName(),
      url: subfolder.getUrl(),
      level: level // Nivel actual para la subcarpeta
    });
    // Llamar a la función recursivamente para las subcarpetas
    listItems(subfolder, items, level + 1);
  });
  
  // Agregar archivos a la lista
  files.forEach(file => {
    items.push({
      name: file.getName(),
      url: file.getUrl(),
      level: level // Mantener el mismo nivel para archivos
    });
  });
}

function compareNumericStrings(strA, strB) {
  const numA = parseInt(strA.split('.')[0], 10);
  const numB = parseInt(strB.split('.')[0], 10);
  
  if (!isNaN(numA) && !isNaN(numB)) {
    return numA - numB;
  }
  return strA.localeCompare(strB);
}
